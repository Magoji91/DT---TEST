library(shiny)
library(data.table)
library(ggplot2)
library(dplyr)

# ui front end interface
# server back end logic

ui <- fluidPage( # layout function that sets up the basic visual structure of the page
  selectInput("dataset", label = "Dataset", choices = ls("package:datasets")), # input control that lets the user interact with the app by providing a value. In this case, it’s a select box with the label “Dataset” and lets you choose one of the built-in datasets that come with R
  verbatimTextOutput("summary"), #displays code
  tableOutput("table") #displays tables
)

#In this simple case, we’re going to tell Shiny how to fill in the summary and table outputs—we’re providing the “recipes” for those outputs. Replace your empty server function with this:


server <- function(input, output, session) {
  output$summary <- renderPrint({
    dataset <- get(input$dataset, "package:datasets")
    summary(dataset)
  })
  
  output$table <- renderTable({
    dataset <- get(input$dataset, "package:datasets")
    dataset
  })
}

output$ID <- renderTYPE({
  # Expression that generates whatever kind of output
  # renderTYPE expects
})

#indicates that you’re providing the recipe for the Shiny output with the matching ID. The right-hand side of the assignment uses a specific render function to wrap some code that you provide; in the example above, we use renderPrint() and renderTable() to wrap our app-specific logic.


We can output our server() to use reactive expressions, as shown below. The app behaves identically, but works a little more efficiently because it only needs to retrieve the dataset once, not twice.


server <- function(input, output, session) {
  dataset <- reactive({
    get(input$dataset, "package:datasets")
  })

  output$summary <- renderPrint({
    summary(dataset())
  })
  
  output$table <- renderTable({
    dataset()
  })
}

#inputId has two constraints:

#It must be a simple string that contains only letters, numbers, and underscores (no spaces, dashes, periods, or other special characters allowed!). Name it like you would name a variable in R.

#It must be unique. If it’s not unique, you’ll have no way to refer to this control in your server function!

#There are two options for displaying data frames in tables:

tableOutput() and renderTable() render a static table of data, showing all the data at once.

dataTableOutput() and renderDataTable() render a dynamic table, showing a fixed number of rows along with controls to change which rows are visible.

tableOutput() is most useful for small, fixed summaries (e.g. model coefficients); dataTableOutput() is most appropriate if you want to expose a complete data frame to the user.


ui <- fluidPage(
  tableOutput("static"),
  dataTableOutput("dynamic")
)
server <- function(input, output, session) {
  output$static <- renderTable(head(mtcars))
  output$dynamic <- renderDataTable(mtcars, options = list(pageLength = 5))
}










